#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

int findNextUse(int referenceString[], int n, int page, int currentIndex) {
    for (int i = currentIndex + 1; i < n; i++) {
        if (referenceString[i] == page) {
            return i;
        }
    }
    return -1; // Return -1 if the page is not found in the future
}

void Optimal(int referenceString[], int n, int frameCount) {
    int frames[frameCount];
    for (int i = 0; i < frameCount; i++) {
        frames[i] = -1; // Initially, all frames are empty
    }

    int pageFaults = 0;
    int pageHits = 0;
    int pageMisses = 0;

    printf("Optimal Page Replacement:\n");

    for (int i = 0; i < n; i++) {
        int page = referenceString[i];
        bool pageFound = false;

        // Check if the page is already in the frames
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] == page) {
                pageFound = true;
                pageHits++;
                break;
            }
        }

        if (!pageFound) {
            // If there is an empty frame, put the page in it
            bool placed = false;
            for (int j = 0; j < frameCount; j++) {
                if (frames[j] == -1) {
                    frames[j] = page;
                    pageFaults++;
                    pageMisses++;
                    placed = true;
                    break;
                }
            }

            // If no empty frame, replace the page that will not be used for the longest time
            if (!placed) {
                int farthest = -1, indexToReplace = -1;
                for (int j = 0; j < frameCount; j++) {
                    int nextUse = findNextUse(referenceString, n, frames[j], i);
                    if (nextUse == -1) {
                        indexToReplace = j;
                        break;
                    } else if (nextUse > farthest) {
                        farthest = nextUse;
                        indexToReplace = j;
                    }
                }
                frames[indexToReplace] = page;
                pageFaults++;
                pageMisses++;
            }
        }

        // Display current frames
        printf("Frames: ");
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] != -1) {
                printf("%d ", frames[j]);
            }
        }
        printf("\n");
    }

    printf("Total Page Hits: %d\n", pageHits);
    printf("Total Page Faults: %d\n", pageFaults);
    printf("Total Page Misses: %d\n", pageMisses);
}

int main() {
    int referenceString[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3};
    int n = sizeof(referenceString) / sizeof(referenceString[0]);
    int frameCount = 3;

    Optimal(referenceString, n, frameCount);
    return 0;
}
//output
Optimal Page Replacement:
Frames: 7 
Frames: 7 0 
Frames: 7 0 1 
Frames: 2 0 1 
Frames: 2 0 1 
Frames: 2 0 3 
Frames: 2 0 3 
Frames: 2 4 3 
Frames: 2 4 3 
Frames: 2 4 3 
Frames: 0 4 3 
Frames: 0 4 3 
Total Page Hits: 5
Total Page Faults: 7
Total Page Misses: 7